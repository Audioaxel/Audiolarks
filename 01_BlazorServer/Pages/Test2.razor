@page "/test2"


<h3 class="mt-5">Test yout Shit twice</h3>

@inject IJSRuntime jsRuntime

<h3>Vid is da</h3>

<!-- Button trigger modal -->
<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
  Launch demo modal
</button>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true"
  hide.bs.modal="onModalClose()">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">


        <VideoPlayer Class="w-100" 
          VideoPath="videos/aoi_soundImplementation.mp4">
        </VideoPlayer>

        <div class="ratio ratio-16x9">
          <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/9l8baG-X-nk" 
            title="YouTube video player" frameborder="0" 
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" 
            allowfullscreen>
          </iframe>
        </div>



      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary">Save changes</button>
      </div>
    </div>
  </div>
</div>

<h3>@test</h3>


@code {

  private string test = "nix geil man";
  private Object _dotNetObjectReference;

  protected override void OnInitialized()
  {
      _dotNetObjectReference = DotNetObjectReference.Create(this);
  }


  [JSInvokableAttribute("OnVideoPlay")]
  public async Task OnVideoPlay()
  {
    test = "geil man";
    await InvokeAsync(StateHasChanged);
  }

  private async Task OnPlay()
  {
    await jsRuntime.InvokeVoidAsync("videoPlayCallback", DotNetObjectReference.Create(this));
    var x = DotNetObjectReference.Create(this);
  }

  [JSInvokable]
  public async Task ModalClose()
  {
    test = "jez habtsas schlossn";
    await InvokeAsync(StateHasChanged);
  }


}